package JianZhiOffer_48_不用加减乘除做加法_发散思维能力;

/**
 * @Author: sunnyandgood
 * @Date: 2019/8/29 0:25
 * 48、不用加减乘除做加法
 * 题目描述
 * 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
 *
 * 解题思路：
 * 5的二进制是101，17的二进制是10001。还是试着把计算分成三
 * 步：第一步各位相加但不计进位，得到的结果是10100（最后一位两个
 * 数都是1，相加的结果是二进制的10。这一步不计进位，因此结果仍然
 * 是0）；第二步记下进位。在这个例子中只在最后一位相加时产生一个
 * 进位，结果是二进制的10；第三步把前两步的结果相加，得到的结果是
 * 10110，转换成十进制正好是22。由此可见三步走的策略对二进制也是
 * 适用的。
 *
 * 接下来我们试着把二进制的加法用位运算来替代。第一步不考虑进
 * 位对每一位相加。0加0、1加1的结果都0，0加1、1加0的结果都是1。我
 * 们注意到，这和异或的结果是一样的。对异或而言，0和0、1和1异或的
 * 结果是0，而0和1、1和0的异或结果是1。接着考虑第二步进位，对0加
 * 0、0加1、1加0而言，都不会产生进位，只有1加1时，会向前产生一个
 * 进位。此时我们可以想象成是两个数先做位与运算，然后再向左移动一
 * 位。只有两个数都是1的时候，位与得到的结果是1，其余都是0。第三
 * 步把前两个步骤的结果相加。第三步相加的过程依然是重复前面两步，
 * 直到不产生进位为止。
 */
public class AddTwoNumber {
    public int Add(int num1,int num2) {
        int sum = 0;
        do {
            sum = num1 ^ num2;
            num2 = (num1 & num2) << 1;
            num1 = sum;
        }while (num2 != 0);
        return num1;
    }
}
